#!/bin/bash -eu

join() {
    local -n _array_to_print=$2
    local IFS=
    local _string_to_print="${_array_to_print[*]/#/"$1"}"
    echo "${_string_to_print/%"$1"}"
}

export ROOT=`cargo metadata --format-version 1 | jq -r ".workspace_root"`
export PYTHONPATH=$ROOT/py:$ROOT/target/release

cd $ROOT

####
# Self-play
####

# LAST_VER="11/version_1/epoch-39"
CPUCT=${CPUCT:-2}
LOSS_WEIGHT=${LOSS_WEIGHT:-0.01}
DEVICE=${DEVICE:-cuda} # since runs/18, the device has to be cpu because of qunantization

INFER_ARGS="-d ${DEVICE} --rollout-num 300 -n 200 --temperature 0 --cpuct ${CPUCT}"

IFS='/' read -ra LAST_VER <<< $LAST_VER
LAST_ITER=${LAST_VER[0]}
LAST_CKPT="${ROOT}/runs/${LAST_ITER}/tb_logs/chess/${LAST_VER[1]}/${LAST_VER[2]}"

set -ex
scripts/run_batch $INFER_ARGS -c "${LAST_CKPT}.pt"
scripts/clean
scripts/show-result | tail -n1
set +ex

####
# Training
####
NEXT_ITER=$(( ${LAST_VER[0]} + 1 ))
mkdir -p runs/$NEXT_ITER
pushd runs/$NEXT_ITER

NEXT_BATCH=$(find b* -maxdepth 0 -type d | sort -V -r | head -n 1)
if [ -z "$NEXT_BATCH" ]; then
    NEXT_BATCH="b0"
else
    NEXT_BATCH="b$(( ${NEXT_BATCH#b} + 1 ))"
fi

mkdir -p $NEXT_BATCH
mv $ROOT/*.json $NEXT_BATCH/
echo "$INFER_ARGS -c $LAST_CKPT" > $NEXT_BATCH.txt

set -ex
python $ROOT/scripts/train.py -t $NEXT_BATCH/*.json -n 20  -c $LAST_CKPT.ckpt --lr 0.0001 --loss-weight ${LOSS_WEIGHT} --save-every-k 2

LAST_TRAIN_VER=$(ls tb_logs/chess/ | sort -V -r | head -n 1)
cd "tb_logs/chess/$LAST_TRAIN_VER"
python $ROOT/scripts/to_torchscript.py -c epoch-*.ckpt --mode amp

source $ROOT/scripts/leader-board
popd
export BLACK="${LAST_CKPT}.pt"
for i in {1,3,5,7}; do
    parallel -j2 task {#} $NEXT_ITER $LAST_TRAIN_VER $i \
        --rollout=300 --temperature 0 --cpuct 2 ::: $(seq 1 100)
done
set +ex
